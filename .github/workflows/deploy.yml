name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: true
        default: 'Manual deployment'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .  # Skip dev dependencies for deployment

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Test SSH Connection
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        # Add server to known hosts with verbose output
        echo "Adding server to known hosts..."
        mkdir -p ~/.ssh
        ssh-keyscan -v -H $SERVER_IP >> ~/.ssh/known_hosts

        # Test connection with verbose output
        echo "Testing SSH connection..."
        ssh -v $SERVER_USER@$SERVER_IP "echo 'SSH connection successful'"

    - name: Deploy to Production
      if: success()
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      run: |
        # Create archive of project
        git archive --format=tar HEAD | gzip > deployment.tar.gz

        # Show archive size
        echo "Archive size: $(ls -lh deployment.tar.gz | awk '{print $5}')"

        # Upload to server with verbose output
        echo "Uploading to server..."
        scp -v deployment.tar.gz $SERVER_USER@$SERVER_IP:/tmp/

        # Deploy commands
        echo "Executing deployment commands..."
        ssh -v $SERVER_USER@$SERVER_IP "
          echo 'Creating directories...'
          mkdir -p \$DEPLOY_PATH/new-deploy

          echo 'Extracting archive...'
          tar -xzf /tmp/deployment.tar.gz -C \$DEPLOY_PATH/new-deploy

          echo 'Installing dependencies...'
          cd \$DEPLOY_PATH/new-deploy
          python -m venv venv
          source venv/bin/activate
          pip install -e .

          echo 'Creating .env file...'
          echo \"${{ secrets.ENV_FILE_CONTENT }}\" > .env

          echo 'Updating symlink...'
          ln -sfn \$DEPLOY_PATH/new-deploy \$DEPLOY_PATH/current

          echo 'Restarting service...'
          sudo systemctl restart instagram-carousel-api

          echo 'Cleaning up...'
          rm /tmp/deployment.tar.gz

          echo 'Deployment completed'
        "

        # Verify deployment
        echo "Verifying deployment..."
        ssh $SERVER_USER@$SERVER_IP "curl -s http://localhost:5001/health | grep -q 'healthy' && echo 'Health check successful' || echo 'Health check failed'"

    - name: Notify on Success
      if: success()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.MAIL_SERVER }}
        server_port: ${{ secrets.MAIL_PORT }}
        username: ${{ secrets.MAIL_USERNAME }}
        password: ${{ secrets.MAIL_PASSWORD }}
        subject: "✅ Deployment Successful - Instagram Carousel API"
        body: "Instagram Carousel API has been successfully deployed to production"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions

    - name: Notify on Failure
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.MAIL_SERVER }}
        server_port: ${{ secrets.MAIL_PORT }}
        username: ${{ secrets.MAIL_USERNAME }}
        password: ${{ secrets.MAIL_PASSWORD }}
        subject: "❌ Deployment Failed - Instagram Carousel API"
        body: "Instagram Carousel API deployment failed. Please check GitHub Actions for details."
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions
